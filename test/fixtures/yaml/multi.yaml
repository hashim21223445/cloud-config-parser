---
apiVersion: v1
kind: Service
metadata:
  name: snyky-service # asdf
  #adsf
  labels:
    app.kubernetes.io/name: snyky-service
    helm.sh/chart: snyky-service-0.1.0
    app.kubernetes.io/instance: snyky-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  #asdf
  ports: #af
    # asdf
    - port: 8080 #adsf
      targetPort: http
      protocol: TCP
      name: http8080
    - port: 9090 #adsf
      targetPort: http
      protocol: TCP
      name: http9090
  selector:
    app.kubernetes.io/name: snyky-service
    app.kubernetes.io/instance: snyky-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: snyky-deployment
  labels:
    app.kubernetes.io/name: snyky
    helm.sh/chart: snyky-0.1.0
    app.kubernetes.io/instance: snyky
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: snyky
      app.kubernetes.io/instance: snyky
  template:
    metadata:
      labels:
        app.kubernetes.io/name: snyky
        app.kubernetes.io/instance: snyky
    spec:
      #       hostPID: true
      containers:
        - name: snyky1
          image: "orka/snyky1:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            # limits:
            # cpu: 100
            # memory: 100
            securityContext:
              privileged: true
              capabilities:
                drop:
                  - all
          #               add:
          #                 - CAP_SYS_ADMIN
        - name: snyky2
          image: "orka/snyky2:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            # limits:
            # cpu: 100
            # memory: 100
          securityContext:
            privileged: true
            capabilities:
              drop:
                - all
      #               add:
      #                 - CAP_SYS_ADMIN
      volumes:
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: MultiIssues
spec:
  privileged: true
  allowPrivilegeEscalation: true
  defaultAllowPrivilegeEscalation: true
  hostPID: true
  hostIPC: true
  hostNetwork: true
  runAsUser:
    rule: RunAsAny
  allowedCapabilities:
    - ALL
  requiredDropCapabilities:
    - "SYS_ADMIN"
---
